= FrugalBuild(5)

== NAME

FrugalBuild - Frugalware package builder descriptor

== SYNOPSIS

This manual page is meant to describe general rules about FrugalBuilds. If
you're interested in the package builder makepkg itself, then see its manual
page, not this one.

== DESCRIPTION

=== Simple Example

----
# Compiling Time: 0.17 SBU
# Maintainer: Name <email@addr.ess>

pkgname=dvdauthor
pkgver=0.6.11
pkgrel=3
pkgdesc="Will generate a DVD movie from a valid mpeg2 stream"
depends=('imagemagick' 'libdvdread')
Finclude sourceforge
groups=('xapps')
archs=('x86_64')
sha1sums=('a99ea7ef6e50646b77ad47a015127925053d34ea')
# optimization OK
----

As you can see, the setup is fairly simple. The first line tracks the time of
the last update, this is automatically updated after a successful build.

The next line defines its build time. Of course, it depends on your hardware,
so we use `SBU`s instead of minutes as a unit.

`SBU` is the Static Binutils Unit, which means the time `repoman merge
binutils` takes on your machine. By default `makepkg` will print out how many
seconds the build took. After you have built `binutils`, you should update your
`/etc/makepkg.d/*makepkg.conf`:

----
SBU="257"
----

The line above means compiling `binutils` on your machine took 257 seconds.
Starting from this point, `makepkg` will print out SBUs instead of seconds after
successful builds, and this SBU value will be equal on everyone's machine.

If you wish to maintain the package, write your name or nick and e-mail address
on the second line. If you just wrote the FrugalBuild don't plan to maintain
the package, then write `Contributor` instead of `Maintainer`, and then someone
can take it and will add his/her line later. Other lines like `Modified by` are
not allowed. Use the commit message to mention others if you wish.

`pkgname` defines the package name. It should not contain any uppercase
letters.  The package version defines the upstream version, while the package
release tracks the Frugalware-specific changes. `pkgrel` should be an integer,
the ones like `5wanda1` are reserved for security updates. In the later case
the rule is the following: If the original package's `pkgrel` was 4, then
increment it once when you add a security patch, but then use `5wanda1`,
`5wanda2` and so on. This way the user can easily upgrade to `pkgrel=5` which
is in `-current`.

`pkgdesc` is a short one-line description for the package. Usually taken from the
project's homepage or manpage. Try to keep the length under 80 chars.

`depends()` is a bash array which defines the dependencies of the package.
`depends()` lists those packages required for building and using the current one.
If the dependency is runtime-only, then use `rodepends()`, if buildtime-only then
use `makedepends()`.

The next line is a special `Finclude` command which allows you to inherit any
directive from a FrugalBuild scheme. They can be found in the `FST`, under
`/source/include`. The `util` scheme is always included, since its provided
functions are used by almost every FrugalBuild. Look at the
`/source/include/sourceforge.sh`, it provides the `url`, `up2date` and
`source()` directives, so we don't have to specify them here. After the
`Finclude` you can overwrite the inherited directives, for example define a
custom `up2date` if the inherited one is not suitable for you.

The `groups()` array's first element is mandatory, and it should be a valid
"first group". This means it should be in a `foo` or `foo-extra` format, where
`foo` or `foo-extra` is a directory under `/source` in the `FST`.

The `archs()` array defines for which architectures the given package is
available. If it's not available, it means that `gensync` will skip it when
generating the package databases. If you are not able to provide a binary
package for a given arch, don't include that in `archs()`! For example, no
matter if the package could be compiled fir `x86_64`, if you haven't compiled
it yourself, don't include it.

The `sha1sums()` array can be generated with the `makepkg -G` command. Its
purpose is to prevent compiling from corrupt sources, especially when the build
is automatic. You can use signatures() if a digital signature is provided by
upstream, its goal is that you don't have to update it manually every time.

The last line will be added automatically to the end of the FrugalBuild if the
`build()` function used your `$CFLAGS` or `$CXXFLAGS`. This is handy if you
want to cross-compile on a faster machine for a slower architecture. If the
package doesn't use our `$CFLAGS` we can't cross-compile it, so please try to
avoid creating 'unoptimized' packages. If the package doesn't contain any
architecture-dependent file, then you can add this line manually as `makepkg`
will not detect this.

Finally we define a `build()` function that will build the package. If you
don't want to do anything special, you probably don't have to specify anything,
as the default build() (inherited from `util.sh`) will fit your needs. Even if
you define a custom build(), probably you can reuse parts of the default
build().  For the list of special functions provided by util.sh and others
refer to the `fwmakepkg` manpage. Again, `util.sh` is included automatically,
but you have to `Finclude` the others before using them!

Once the package is successfully installed into the package root, makepkg will
prepare some documentation. It will then strip debugging info from libraries
and binaries and generate a meta-info file. Finally, it will compress
everything into a `.fpm` file and leave it in the directory from which you ran
`makepkg`.

At this point you should have a package file in the current directory, named
something like `name-version-release-arch.fpm`. Done!

=== Install/Upgrade/Remove Scripting

`pacman-g2` has the ability to store and execute a package-specific
non-interactive script when it installs, removes, or upgrades a package. This
allows a package to 'configure itself' after installation and do the opposite
right before it is removed.

The exact time the script is run varies with each operation:

pre_install::
	script is run right before files are extracted.

post_install::
	script is run right after files are extracted.

pre_upgrade::
	script is run right before files are extracted.

post_upgrade::
	script is run after files are extracted.

pre_remove::
	script is run right before files are removed.

post_remove::
	script is run right after files are removed.

To use this feature, just create a file (eg, pkgname.install) and put it in the
same directory as the FrugalBuild script. Then use the install directive:

----
install=pkgname.install
----

The install script does not need to be specified in the source array. If you
omit the install directive then makepkg will check for the $pkgname.install
script and will use it if it's present.

You can find a scriptlet skeleton in the `/docs/skel/` directory, use it when
creating new packages.

The scriptlet messages are parsed, a simple example tells you everything:

----
post_upgrade()
{
	echo "START this will be good"
	echo "DONE 0"
	echo "START this will fail"
	echo "DONE 1"
	echo "old message"
}
----

=== FrugalBuild Directives

pkgname::
	The name of the package. It can contain hyphens and should be lowercase. It is
	usually the name part of the source tarball.

pkgver::
	This is the version of the software as released from the author (eg,
	2.7.1).

pkgrel::
	This is the release number specific to Frugalware Linux packages.

pkgdesc::
	This should be a brief description of the package and its
	functionality.

pkgdesc_localized::
	Array of the localized package descriptions. The format is the
	following:

----
pkgdesc_localized=('xx_YY foo' 'xx_YY bar')
----

url::
	This field contains an optional URL that is associated with the piece
	of software being packaged. This is typically the project's website.

license::
	Sets the license type (eg, "GPL", "BSD", "NON-FREE").

NOTE: This option is currently optional and there are no rules what exact
formats you should use (if you should use `GPL` or `GPL2` and so on).

install::
	Specifies a special install script that is to be included in the package. This
	file should reside in the same directory as the FrugalBuild, and will be copied
	into the package by makepkg. It does not need to be included in the source
	array. (eg, `install=modutils.install`)

up2date::
	This directive should contain a command that prints the current upstream stable
	version of the project. This way we can check for newer version without
	visiting manually the project's website (see above).

source (array)::
	The source line is an array of source files required to build the package.
	Source files must reside in the same directory as the FrugalBuild file, unless
	they have a fully-qualified URL. Then if the source file does not already exist
	in `/var/cache/pacman-g2/src`, the file is downloaded by wget.

sha1sums (array)::
	If this field is present, it should contain an SHA1 hash for every source file
	specified in the source array (in the same order). `makepkg` will use this to
	verify source file integrity during subsequent builds. To easily update
	sha1sums in the FrugalBuild, run `makepkg -G`.

signatures (array)::
	If this field is present, it should contain an array of gpg signatures
	required to validate the source files. It is recommended (but not
	required) that you also add the key or keyring of upstream to a file
	named $pkgname.key to make off-line build possible. If there is no such
	file, and the key is available on a public keyserver, it will be
	retrieved automatically. Otherwise the build will be aborted. Where
	there is no signature available just leave it empty, like:

----
signatures=(${source[0]}.asc '')
----

groups (array)::
	This is an array of symbolic names that represent groups of packages, allowing you to
	install multiple packages by requesting a single target. For example, one could install
	all KDE packages by installing the 'kde' group.

archs (array)::
	This array defines on which architectures the given package is available. If
	it's not available, that will mean that `gensync` will skip it when generating
	the package database.

backup (array)::
	A space-delimited array of filenames (without a preceding slash). The backup
	line will be propagated to the package meta-info file for pacman-g2. This will
	designate all files listed there to be backed up if this package is ever
	removed from a system. See 'HANDLING CONFIG FILES' in the `pacman-g2` manual
	page for more information.

depends (array)::
	An array of packages that this package depends on to build and run. Packages in
	this list should be surrounded with single quotes and contain at least the
	package name. They can also include a version requirement of the form
	'name<>version', where <> is one of five comparisons: >= (greater than or equal
	to), <= (less than or equal to), = (equal to), > (greater than), or < (less
	than). See the FrugalBuild example above for an example of the depends
	directive.

makedepends (array)::
	An array of packages that this package depends on to build (ie, not required to
	run). Packages in this list should follow the same format as depends.

rodepends (array)::
	An array of packages that this package depends on to run (ie, not required to
	build). Generally rodepends should be avoided in favour of depends except where
	this will create circular dependency chains. (For example building logrotate
	doesn't require that dcron be installed.) Packages in this list should follow
	the same format as depends.

conflicts (array)::
	An array of packages that will conflict with this package (ie, they cannot both
	be installed at the same time). This directive follows the same format as
	depends except you cannot specify versions here, only package names.

provides (array)::
	An array of "virtual provisions" that this package provides. This allows a
	package to provide dependency names other than it's own package name. For
	example, the kernel-scsi and kernel-ide packages can each provide 'kernel'
	which allows packages to simply depend on 'kernel' rather than "kernel-scsi OR
	kernel-ide OR ..."

removes (array)::
	This is an array of files to be removed before the filecontlict check. Ideally
	you should never use it, but in some cases it's handy to remove conflicting
	files generated by a scriptlet if you are sure about really nobody needs it.

replaces (array)::
	This is an array of packages that this package should replace, and can be used
	to handle renamed/combined packages. For example, if the kernel package gets
	renamed to kernel-ide, then subsequent 'pacman-g2 -Syu' calls will not pick up
	the upgrade, due to the differing package names. replaces handles this.

options (array)::
	This is an array of various boolean options. The possible values are:

	nodocs: Don't add any documentation automatically (ie. when there'll be a
	separate documentation subpackage).

	nostrip: Don't strip binaries/libraries.

	noccache: Disable ccache usage during build.

	force: This is used to force the package to be upgraded by --sysupgrade, even
	if its an older version.

	nobuild: If this directive set, gensync will ignore this package, so users must
	build these packages on their machines, they will not be able to install them
	with pacman-g2 -S. Useful for closed-source, but freeware programs.

	nofakeroot: Don't drop privileges after chrooting. Required by some broken
	packages.

	noasneeded: changes the default -Wl,--as-needed to -Wl,--no-as-needed in LDLAGS

	nonow: removes -Wl,-z,now from LDFLAGS

	norelro: removes -Wl,-z,relro from LDFLAGS

	nopie: disables PIE builds.

	nolto: disables LTO builds.

	noclash: removes -fstack-clash-protection from C/CXX FLAGS
	
	noprotector: removes -fstack-protector-strong from C/CXX FLAGS

	nowfsecurity: removes -Wformat -Werror=format-security from C/CXX FLAGS

	nofortify: removes -D_FORTIFY_SOURCE=2 from C/CXX FLAGS

	plt: build with PLT enabled (default: -fno-plt)

	ldefs: is adding -Wl,-z,defs to LDFLAGS

	ldgold: build with gold linker

	ldbfd: build with bdf linker ( default )

	ldlld: build with llvm lld linker

	osmall: build packages with -Os optimization

	omedium: build packages with -O2 optimization ( default )

	ofast: build packages with -O3 optimization

	ofaster: build packages with -Ofast optimization

	odebug: build packages with -O0 -ggdb3 

	static: builds static libs for the package

	libtool: won't remove or use  workarounds for libtool's la files

	scriptlet: Don't skip executing scriptlets even if we're in chroot.

	nomirror: This means that the source should not be mirrored.

	genscriptlet: Informs makepkg about not having a scriptlet is intentional. You
	want to use this when the scriptlet is generated during build().

	noversrc: Informs makepkg about the source tarball does not contain the
	package version, so it should be always downloaded from upstream, rather
	than using an rsync mirror.

NOTE: Feel free to use `nomirror` in a WIP repo but please try avoid it when
pushing to a production repository.

=== What is the process of chrooted build?

First, what is chroot? If you use `makepkg -H`, then you use fakeroot to
prevent build() from modifying the host system, and you use a prefix or DESTDIR
directive to install everything to a directory and not under to the host
system. This is good, but not enough.

This system lacks the ability to control the list of installed packages during
the build on the system of a packager. Because of this, the given compiled
package may link itself to an extra installed library. This way we can't really
control the list of real dependencies. For example if `libquicktime` is
installed from source on your system, then `mplayer` or any other program can
link itself to that, and so that depends() will be incorrect. Or if you have
the closed source binary NVidia drivers installed, some programs will link to
NVidia's libraries.

Of course there is a solution to avoid this, to use a real `chroot` instead of
a simple `fakeroot`. What does this mean? The following:

When starting the build, a core chroot system is installed under /var/chroot.
(Of course you can change this value under `/etc/makepkg.conf`.) The core
system contains ~ 60 packages which must be installed to build any package in a
chrooted environment. These packages (for example gcc, kernel-headers, make)
should not be mentioned in makedepends(). `pacman-g2 -Sg core chroot-core
devel-core` should show you the actual list. (We try to change this list rarely
and try to keep it short, of course.)

When you start building with `makepkg` (without `-H`), pacman-g2 will install
these packages to /var/chroot if necessary. This will produce a fully 'clean'
Frugalware system, that consists of base packages only. This `/var/chroot` is
fully separated from the host system so that this will solve the problems
mentioned above. (Linking to a library installed from source, etc.)

Here comes the fun part. The packages listed in depends() and makedepends() are
installed to this clean (`/var/chroot`) system. From this point, this chroot is
capable to build the specified package in it without unnecessary packages being
installed, fully separated from the host system.

After this, the chroot should be cleaned up which means the removal of the
installed depends() and makedepends(). This ensures you do not have to build
the core chroot from scratch. This action is performed by `makepkg` after a
successful build.

NOTE: The cleanup is done by removing every package not listed in the
`COREPKGS` group list (see `makepkg.conf`), and everything depending on
such packages. So be careful when you add a new dependency to such a
package (for example `gcc`): first add the new dependency to one of
those groups and once the change is available on each arch, you can add
the dependency itself. Otherwise it can easily happen that `gcc` gets
removed from the chroot, which means most build will just fail.

This way we can prevent lots of dependency problems and it is even possible to
build packages for a different Frugalware version. This is quite efficient when
building security updates or fixing critical bugs in the `-stable` tree.

If the build fails, the working directory will not be deleted, you can find it
under `/var/chroot/$tree/var/tmp/fst`. Later if you want to clean your chroot
(delete the working directory and remove unnecessary packages) you can use
`makepkg -C`.

To deactivate building in a `chroot` (for testing purposes), you should run
`makepkg` with the `-H` option.

=== Package splitting

Package splitting means moving out a list of specified files to 'subpackages'
(like `libmysql` out of `mysql`) and then defining the properties of
subpackages.

NOTE: If you create several subpackages, maintaining those packages will
require more and more time. Thus, unnecessary splits aren't welcome.
Especially, if you split out a library, then don't move the headers to the
package just to speed up building with a few seconds!

The subpkgs() array is to define the pkgnames of the subpackages. From now all
the directive have a subfoo equivalent:

----
pkgname -> subpkgs()
pkgdesc -> subdescs()
pkgdesc_localized -> subdescs_localized()
license() -> sublicense()
replaces() -> subreplaces()
groups() -> subgroups()
depends() -> subdepends()
rodepends() -> subrodepends()
removes() -> subremoves()
conflicts() -> subconflicts()
provides() -> subprovides()
backup() -> subbackup()
install -> subinstall()
options -> suboptions()
archs -> subarchs()
----

Also note that bash does not support two-dimensional arrays, so when defining
the array of arrays, then quotes are the major separators and spaces are the
minor ones.

Simple example:

----
subpkgs=('foo' 'bar')
subdescs=('desc of foo' 'desc of bar')
subdepends=('foodep1 foodep2' 'bardep1 bardep2')
subgroups=('apps' 'apps')
subarchs=('x86_64' 'x86_64')
----

or

----
subpkgs=('foo')
subdescs=('desc of foo')
subdepends=('foodep1 foodep2')
subgroups=('apps')
subarchs=('x86_64')

subpkgs+=('bar')
subdescs+=('desc of bar')
subdepends+=('bardep1 bardep2')
subgroups+=('apps')
subarchs+=('x86_64')
----

You may define conflicts, replaces and other directives for your subpackages,
but the requirement is only to define these 5 ones.

The second part is to move some files to the - just defined - subpackages. You
should use the Fsplit command for this at the end of your build() function.
You can read more about Fsplit in the fwmakepkg documentation, but here is a
short example:

----
Fsplit subpkgname usr/share/
----

This will move the /usr/share dir of the package to the "subpkgname"
subpackage.

NOTE: Don't use a trailing slash when defining file patterns with wildcards in
it!

=== Systemd services

Use a snippet like the following to enable/disable the service during
installation/deinstallation:

----
post_install()
{
        # On install (not upgrade), enable (but don't start) the
        # units by default
        systemctl enable foobar.service >/dev/null 2>&1
}

post_upgrade()
{
        # Reload init system configuration, to make systemd honour changed
		# unit files
        systemctl daemon-reload >/dev/null 2>&1
        if [ `vercmp $2 4.4-5` -lt 0 ]; then
                do_domething
        fi
}

pre_remove()
{

        # On uninstall (not upgrade), disable and stop the units
        systemctl --no-reload disable foobar.service >/dev/null 2>&1
        systemctl stop foobar.service >/dev/null 2>&1
}

post_remove()
{
        # Reload init system configuration, to make systemd honour
        # deleted unit files
        systemctl daemon-reload >/dev/null 2>&1
}
----

== SEE ALSO

*makepkg*(8), *pacman-g2*(8)

include::bugs.txt[]

== AUTHORS

See /usr/share/doc/pacman-g2-*/AUTHORS.
