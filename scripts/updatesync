#!/bin/bash
#
#   updatesync
#
#   Copyright (c) 2004 by Jason Chu <jchu@xentac.net>
#   Copyright (c) 2007, 2008, 2010 by Miklos Vajna <vmiklos@frugalware.org>
#   Derived from gensync (c) 2002-2006 Judd Vinet <jvinet@zeroflux.org>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

# makepkg configuration

[ -z "$arch" ] && arch=`arch`

# FIXME
CARCH="$arch"
PKG_EXT="fpm"
DB_EXT="fdb"

usage() {
	echo "updatesync"
	echo "usage: $0 <action> <destfile> <option> [package_directory]"
	echo
	echo "updatesync will update a sync database by reading a $BUILDSCRIPT and"
	echo "modifying the destfile. updatesync updates the database in a temporary"
	echo "directory and then compresses it to <destfile>."
	echo
	echo "There are two types of actions:"
	echo
	echo "upd - Will update a package's entry or create it if it doesn't exist."
	echo "      It takes the package's $BUILDSCRIPT as an option."
	echo "del - Will remove a package's entry from the db."
	echo "      It takes the package's name as an option."
	echo
	echo "updatesync will calculate sha1sums of packages in the same directory as"
	echo "<destfile>, unless an alternate [package_directory] is specified."
	echo
	echo "example:  updatesync upd /home/mypkgs/custom.$DB_EXT $BUILDSCRIPT"
	echo
	echo
	exit 0
}

die()
{
	echo "updatesync: $*" >&2
	rm -rf $ustmpdir
	exit 1
}

# Frugalware functions
CHROOT=1
[ -e /usr/lib/frugalware/fwmakepkg ] && . /usr/lib/frugalware/fwmakepkg

get_sha1checksum()
{
	if [ -f $pkgfile ]; then
		format=`file -i $pkgfile |sed 's/.*: \(.*\);.*/\1/'`
		if [ "$format" == "application/x-bzip2" ]; then
			bzip2 --test $pkgfile || die "corrupted bzip2 package: $pkgfile"
		elif [ "$format" == "application/x-xz" ]; then
			xz --test $pkgfile || die "corrupted xz package: $pkgfile"
		else
			die "unsupported package format: $format"
		fi
		sha1line=`sha1sum $pkgfile`
		[ ! -z "$sha1line" ] && pkgsha1sum=${sha1line%  *}
		echo $pkgsha1sum
	fi
	return 0
}

db_write_entry()
{
	echo "updatesync: writing $1-$pkgver-$pkgrel" >&2
	if [ "$pkgdir" != "" ]; then
		pkgfile="$pkgdir/$1-$pkgver-$pkgrel-$arch.$PKG_EXT"
	else
		pkgfile="$destdir/$1-$pkgver-$pkgrel-$arch.$PKG_EXT"
	fi
	csize=`du -b $pkgfile 2>/dev/null | cut -f1`
	usize=`LANG= LC_ALL= pacman-g2 -Qi -p $pkgfile 2>/dev/null|grep ^Size|sed 's/.*: \(.*\)/\1/'`
	pkgsha1sum=`get_sha1checksum $pkgfile`
	if [ -z $pkgsha1sum ]; then
		if [ ! "$forcepkgs" ]; then
			die "missing package: $pkgfile"
		else
			echo "updatesync: missing package: $pkgfile" >&2
			return 0
		fi
	fi
	cd $ustmpdir
	mkdir $1-$pkgver-$pkgrel || return 1
	cd $1-$pkgver-$pkgrel
	# desc
	: >desc
	echo "%NAME%" >>desc
	echo "$1" >>desc
	echo "" >>desc
	echo "%VERSION%" >>desc
	echo "$pkgver-$pkgrel" >>desc
	echo "" >>desc
	echo "%DESC%" >>desc
	echo "$pkgdesc" >>desc
	for it in "${pkgdesc_localized[@]}"; do
	  echo "$it" >>desc
	done
	echo "" >>desc
	echo "%ARCH%" >>desc
	echo "$arch" >>desc
	echo "" >>desc
	echo "%CSIZE%" >>desc
	echo "$csize" >>desc
	echo "" >>desc
	echo "%USIZE%" >>desc
	echo "$usize" >>desc
	echo "" >>desc
	if [ ! -z $pkgsha1sum ]; then
		echo "%SHA1SUM%" >>desc
		echo "$pkgsha1sum" >>desc
		echo "" >>desc
	fi
	if [ ${#groups[*]} -gt 0 ]; then
		echo "%GROUPS%" >>desc
		for it in ${groups[@]}; do
			echo "$it" >>desc
		done
		echo "" >>desc
	fi
	if [ ${#replaces[*]} -gt 0 ]; then
		echo "%REPLACES%" >>desc
		for it in ${replaces[@]}; do
			echo "$it" >>desc
		done
		echo "" >>desc
	fi
	if [ "$force" = "y" -o "$force" = "Y" -o "`check_option FORCE`" ]; then
		echo "%FORCE%" >>desc
		echo "" >>desc
	fi
	if [ "`check_option STICK`" ]; then
		echo "%STICK%" >>desc
		echo "" >>desc
	fi
	# depends
	: >depends
	if [ ${#depends[*]} -gt 0 -o ${#rodepends[*]} -gt 0 ]; then
		echo "%DEPENDS%" >>depends
		for it in ${depends[@]} ${rodepends[@]}; do
		  echo "$it" >>depends
		done
		echo "" >>depends
	fi
	if [ ${#conflicts[*]} -gt 0 ]; then
		echo "%CONFLICTS%" >>depends
		for it in ${conflicts[@]}; do
		  echo "$it" >>depends
		done
		echo "" >>depends
	fi
	if [ ${#provides[*]} -gt 0 ]; then
		echo "%PROVIDES%" >>depends
		for it in ${provides[@]}; do
		  echo "$it" >>depends
		done
		echo "" >>depends
	fi
	cd ..
	fakeroot tar rf $udb $1-$pkgver-$pkgrel
}

in_array()
{
	local i
	needle=$1
	shift 1
	# array() undefined
	[ -z "$1" ] && return 1
	for i in $*
	do
		[ "$i" == "$needle" ] && return 0
	done
	return 1
}

delete_entry()
{
	echo $1 | grep $BUILDSCRIPT 2>&1 >/dev/null
	if [ $? -eq 0 ]; then
		cd `dirname $1`
		startdir=`pwd`
		source $1
		cd - >/dev/null
	else
		pkgname=$1
	fi
	for i in `tar tf $udb|grep /$`; do
		for j in $pkgname ${subpkgs[@]}; do
			if [ "$j" == "${i%-*-*}" ]; then
				echo "updatesync: deleting `basename $i`" >&2
				tar --delete -f $udb $i
			fi
		done
	done
}

if [ $# -lt 3 ]; then
	usage
	exit 1
fi

if [ "$1" = "-h" -o "$1" = "--help" ]; then
	usage
	exit 0
fi

if [ "$1" = "-f" -o "$1" = "--force" ]; then
	forcepkgs=1
	shift 1
fi

action=$1
pkgdb=$2
option=$3
curdir="`pwd`"
pkgdir=$curdir
if [ "$4" != "" ]; then
	pkgdir=$4
fi

if [ "$action" != "upd" -a "$action" != "del" ]; then
	usage
	exit 1
fi

ustmpdir=$(mktemp -d /tmp/updatesync.XXXXXXXXXX) || exit 1

cd $ustmpdir
if [ ! -f $pkgdb ]; then
	if [ ! -f $curdir/$pkgdb ]; then
		echo "updatesync: $pkgdb not found"
		exit 1
	fi
	pkgdb=$curdir/$pkgdb
fi

if [ "$action" = "upd" -a ! -f $option ]; then
	if [ ! -f $curdir/$option ]; then
		echo "updatesync: $option not found"
		exit 1
	fi
	option=$curdir/$option
fi


bdb=`basename $pkgdb`
udb=`basename $bdb .fdb`.tar
echo "updatesync: uncompressing to $ustmpdir..." >&2
format=`file -i $pkgdb |sed 's/.*: \(.*\);.*/\1/'`
if [ "$format" == "application/x-bzip2" ]; then
	bunzip2 -c -d $pkgdb > $udb || die "error uncompressing $pkgdb"
elif [ "$format" == "application/x-xz" ]; then
	xz -c -d $pkgdb > $udb || die "error uncompressing $pkgdb"
else
	die "unsupported package format: $format"
fi
if [ "$action" = "upd" ]; then
	# INSERT / UPDATE
	delete_entry $option

	cd `dirname $option`
	startdir=`pwd`
	source $option || die "errors parsing $option"
	cd - >/dev/null
	group="${groups[0]}"
	if in_array $arch ${archs[@]} || [ "$nobuild" -o "`check_option NOBUILD`" ]; then
		unset pkgname pkgver pkgrel pkgdesc force pkgdesc_localized
		unset groups replaces provides depends rodepends conflicts options
		unset subpkgs subdescs sublicense subreplaces subgroups
		unset subdepends subrodepends subremoves subconflicts suboptions
		unset subprovides subbackup subinstall suboptions subdescs_localized
		for i in `set|grep ^_F_|sed 's/\(=.*\| ()\)//'`; do unset $i; done
		cd `dirname $option`
		startdir=`pwd`
		source $option || die "error parsing $option"
		cd - >/dev/null
		db_write_entry $pkgname || die "error writing entry for $pkgname ($option)"
	fi
	if [ ! -z "$subpkgs" ]; then
		i=0
		for subpkg in "${subpkgs[@]}"
		do
			unset pkgdesc groups archs replaces force depends
			unset rodepends conflicts provides options pkgdesc_localized
			pkgdesc="${subdescs[$i]}"
			pkgdesc_localized="${subdescs_localized[$i]}"
			groups="${subgroups[$i]}"
			archs="${subarchs[$i]}"
			replaces="${subreplaces[$i]}"
			force="${subforce[$i]}"
			depends="${subdepends[$i]}"
			rodepends="${subrodepends[$i]}"
			conflicts="${subconflicts[$i]}"
			provides="${subprovides[$i]}"
			options="${suboptions[$i]}"
			if in_array $arch ${archs[@]} && [ ! "`check_option NOBUILD`"]; then
				db_write_entry $subpkg || die "error writing entry for $subpkg ($option)"
			fi
			i=$(($i+1))
		done
	fi
	ver=""
	rootdir=`dirname $option`
	if ( cd $rootdir; git rev-parse --get-root &>/dev/null); then
		ver=`cd $rootdir; git describe 2>/dev/null`
	fi
	if [ -n "$ver" ]; then
		echo ${ver//-/.} > .version
		tar --delete -f $udb .version 2>/dev/null
		fakeroot tar rf $udb .version
	fi
else
	# DELETE
	delete_entry $option
fi

echo "updatesync: compressing to $bdb..." >&2
cd $ustmpdir
xz -c $udb >$bdb || die "error writing to $bdb"
mv $bdb $pkgdb || die "error moving $bdb to $pkgdb"

cd $curdir
rm -rf $ustmpdir

exit 0
